rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserTenant(userId) {
      return get(/databases/$(database)/documents/userTenants/$(userId));
    }
    
    function userBelongsToTenant(userId, tenantId) {
      let userTenant = getUserTenant(userId);
      return userTenant != null && 
             userTenant.data != null &&
             tenantId in userTenant.data.tenants;
    }
    
    function hasRole(userId, tenantId, allowedRoles) {
      let userTenant = getUserTenant(userId);
      return userTenant != null && 
             userTenant.data != null &&
             tenantId in userTenant.data.tenants &&
             userTenant.data.tenants[tenantId].role in allowedRoles;
    }
    
    function getUserRole(userId, tenantId) {
      let userTenant = getUserTenant(userId);
      return userTenant != null && 
             userTenant.data != null &&
             tenantId in userTenant.data.tenants ?
             userTenant.data.tenants[tenantId].role : null;
    }
    
    function canManageTenant(userId, tenantId) {
      return hasRole(userId, tenantId, ['owner', 'admin']);
    }
    
    function canEditData(userId, tenantId) {
      return hasRole(userId, tenantId, ['owner', 'admin', 'manager']);
    }
    
    function isOwner(userId, tenantId) {
      return hasRole(userId, tenantId, ['owner']);
    }
    
    function isValidFlagUpdate(data) {
      // For create operations, we need more fields
      // For updates, we just need flags
      return (data.keys().hasAll(['flags', 'createdBy', 'createdAt']) ||
              data.keys().hasAll(['flags'])) &&
             data.flags is map;
    }
    
    // Users collection - users can manage their own profile
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // UserTenants collection - users can manage their own tenant relationships
    // Extended to support feature flag overrides
    match /userTenants/{userId} {
      // Users can read their own tenant relationships
      // OR users can read documents of other users who share a tenant with them
      allow read: if isAuthenticated() && 
                     (request.auth.uid == userId ||
                      // Check if the requester shares any tenant with this user
                      (resource != null && 
                       resource.data.tenants != null &&
                       exists(/databases/$(database)/documents/userTenants/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/userTenants/$(request.auth.uid)).data.tenants.keys().hasAny(resource.data.tenants.keys())));
      
      // Users can write their own data, OR
      // Owners/managers can set feature flag overrides for users in their tenant
      allow write: if isAuthenticated() && 
                      (request.auth.uid == userId ||
                       (resource != null &&
                        request.resource.data.keys().hasAll(resource.data.keys()) &&
                        // Only allowing modification of featureFlags field by managers
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['featureFlags']) &&
                        // Must be owner/manager of at least one shared tenant
                        resource.data.tenants.keys().toSet().intersection(
                          get(/databases/$(database)/documents/userTenants/$(request.auth.uid)).data.tenants.keys().toSet()
                        ).size() > 0));
    }
    
    // Tenants collection - tenant members can read, owners/admins can write
    match /tenants/{tenantId} {
      allow read: if isAuthenticated() && 
                     (userBelongsToTenant(request.auth.uid, tenantId) ||
                      resource.data.ownerId == request.auth.uid);
      allow create: if isAuthenticated() && 
                       request.resource.data.ownerId == request.auth.uid; // User creating must be the owner
      allow update: if isAuthenticated() && canManageTenant(request.auth.uid, tenantId);
      allow delete: if isAuthenticated() && isOwner(request.auth.uid, tenantId);
    }
    
    // Invite codes lookup collection (public read for accepting invites)
    match /inviteCodes/{code} {
      allow read: if true; // Anyone can look up an invite code
      allow create: if isAuthenticated() && 
                       userBelongsToTenant(request.auth.uid, request.resource.data.tenantId) &&
                       canEditData(request.auth.uid, request.resource.data.tenantId);
      allow update: if false; // Invite codes should never be updated
      allow delete: if isAuthenticated() && 
                       userBelongsToTenant(request.auth.uid, resource.data.tenantId) &&
                       canManageTenant(request.auth.uid, resource.data.tenantId);
    }
    
    // Tenant invites collection
    match /tenants/{tenantId}/invites/{inviteId} {
      // Allow read if user belongs to tenant OR if they are the invited email
      allow read: if isAuthenticated() && 
                     (userBelongsToTenant(request.auth.uid, tenantId) || 
                      (resource != null && resource.data.recipientEmail == request.auth.token.email));
      
      // Allow create if user can edit data in the tenant
      allow create: if isAuthenticated() && 
                       userBelongsToTenant(request.auth.uid, tenantId) &&
                       canEditData(request.auth.uid, tenantId);
      
      // Allow update if user can manage tenant OR if accepting the invite
      allow update: if isAuthenticated() && 
                       (canManageTenant(request.auth.uid, tenantId) ||
                        (resource.data.recipientEmail == request.auth.token.email &&
                         request.resource.data.status == 'accepted'));
      
      // Allow delete if user can manage tenant
      allow delete: if isAuthenticated() && 
                       canManageTenant(request.auth.uid, tenantId);
    }
    
    // Task-specific rules with assignment checking
    match /tenants/{tenantId}/tasks/{taskId} {
      // Anyone in tenant can read tasks
      allow read: if isAuthenticated() && 
                     userBelongsToTenant(request.auth.uid, tenantId);
      
      // Only assigned users or managers can update
      allow update: if isAuthenticated() && 
                       userBelongsToTenant(request.auth.uid, tenantId) &&
                       (request.auth.uid in resource.data.assignedTo ||
                        hasRole(request.auth.uid, tenantId, ['owner', 'admin', 'manager']));
      
      // Managers and above can create/delete
      allow create, delete: if isAuthenticated() && 
                               hasRole(request.auth.uid, tenantId, ['owner', 'admin', 'manager']);
    }
    
    // Client-specific rules with optional team member creation
    match /tenants/{tenantId}/clients/{clientId} {
      // All tenant members can read
      allow read: if isAuthenticated() && 
                     userBelongsToTenant(request.auth.uid, tenantId);
      
      // Team members can create if feature is enabled
      allow create: if isAuthenticated() && 
                       userBelongsToTenant(request.auth.uid, tenantId) &&
                       (hasRole(request.auth.uid, tenantId, ['owner', 'admin', 'manager']) ||
                        get(/databases/$(database)/documents/tenants/$(tenantId)).data.settings.allowTeamMemberCreateClients == true);
      
      // Only managers and above can update/delete
      allow update, delete: if isAuthenticated() && 
                               hasRole(request.auth.uid, tenantId, ['owner', 'admin', 'manager']);
    }
    
    // Settings protection - separate from tenant document
    match /tenants/{tenantId}/settings/{document} {
      // Only owners and admins can read settings
      allow read: if isAuthenticated() && 
                     hasRole(request.auth.uid, tenantId, ['owner', 'admin']);
      
      // Only owners can write settings
      allow write: if isAuthenticated() && 
                      hasRole(request.auth.uid, tenantId, ['owner']);
    }
    
    // Financial data protection
    match /tenants/{tenantId}/invoices/{invoiceId} {
      // Managers and above can read
      allow read: if isAuthenticated() && 
                     hasRole(request.auth.uid, tenantId, ['owner', 'admin', 'manager']);
      
      // Only admins and owners can create/update
      allow create, update: if isAuthenticated() && 
                               hasRole(request.auth.uid, tenantId, ['owner', 'admin']);
      
      // Only owners can delete
      allow delete: if isAuthenticated() && 
                       hasRole(request.auth.uid, tenantId, ['owner']);
    }
    
    // Bulk invite sessions
    match /tenants/{tenantId}/bulkSessions/{sessionId} {
      allow read: if isAuthenticated() && 
                     userBelongsToTenant(request.auth.uid, tenantId);
      allow create: if isAuthenticated() && 
                       userBelongsToTenant(request.auth.uid, tenantId) &&
                       canEditData(request.auth.uid, tenantId);
      allow update, delete: if false; // Sessions are immutable
    }
    
    // Pending approvals collection (for team member suggestions)
    match /tenants/{tenantId}/pendingApprovals/{inviteId} {
      allow read: if isAuthenticated() && 
                     userBelongsToTenant(request.auth.uid, tenantId);
      allow create: if isAuthenticated() && 
                       userBelongsToTenant(request.auth.uid, tenantId);
      allow update, delete: if isAuthenticated() && 
                               canManageTenant(request.auth.uid, tenantId);
    }
    
    // ========== NEW PERMISSION SYSTEM RULES ==========
    
    // Feature Flags - Control access to features per tenant
    match /tenantFeatureFlags/{tenantId} {
      // Anyone in the tenant can read feature flags (needed for permission checks)
      allow read: if isAuthenticated() && 
                     (userBelongsToTenant(request.auth.uid, tenantId) ||
                      get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerId == request.auth.uid);
      
      // Only owners and managers can modify feature flags
      // OR the user creating the tenant (for initial setup)
      allow create: if isAuthenticated() &&
                       (request.resource.data.createdBy == request.auth.uid ||
                        hasRole(request.auth.uid, tenantId, ['owner', 'manager'])) &&
                       isValidFlagUpdate(request.resource.data);
                       
      allow update: if isAuthenticated() &&
                       hasRole(request.auth.uid, tenantId, ['owner', 'manager']) &&
                       isValidFlagUpdate(request.resource.data);
      
      // Only owners can delete feature flag documents
      allow delete: if isAuthenticated() && 
                       hasRole(request.auth.uid, tenantId, ['owner']);
    }
    
    // Feature Flag Audit Logs - Track all permission changes
    match /featureFlagAudit/{tenantId}/logs/{logId} {
      // Only owners can read audit logs
      allow read: if isAuthenticated() && 
                     hasRole(request.auth.uid, tenantId, ['owner']);
      
      // Anyone in the tenant can create audit logs (but not modify)
      // Ensures performedBy matches the authenticated user
      allow create: if isAuthenticated() && 
                       userBelongsToTenant(request.auth.uid, tenantId) &&
                       request.resource.data.performedBy == request.auth.uid &&
                       request.resource.data.performedAt == request.time;
      
      // No one can update or delete audit logs (immutable for compliance)
      allow update, delete: if false;
    }
    
    // ========== END NEW PERMISSION SYSTEM RULES ==========
    
    // Default tenant-scoped collections
    match /tenants/{tenantId}/{collection}/{document} {
      allow read: if isAuthenticated() && userBelongsToTenant(request.auth.uid, tenantId);
      allow create, update: if isAuthenticated() && canEditData(request.auth.uid, tenantId);
      allow delete: if isAuthenticated() && canManageTenant(request.auth.uid, tenantId);
      
      // Nested collections
      match /{subcollection}/{subdocument=**} {
        allow read: if isAuthenticated() && userBelongsToTenant(request.auth.uid, tenantId);
        allow create, update: if isAuthenticated() && canEditData(request.auth.uid, tenantId);
        allow delete: if isAuthenticated() && canManageTenant(request.auth.uid, tenantId);
      }
    }
  }
}